{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["currentPath","playerOptions","App","useState","files","setFiles","id","uuidv4","name","folderChain","setFolderChain","player","setPlayer","useEffect","fetch","then","request","json","map","x","value","label","length","console","log","response","push","isDir","fileActions","ChonkyActions","OpenFiles","ChangeSelection","OpenParentFolder","requiresSelection","className","defaultValue","onChange","options","onFileAction","action","data","undefined","decodeURIComponent","newFolderChain","url","alert","substring","lastIndexOf","newfc","splice","disableDefaultFileActions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2LAOIA,E,oGAUAC,EAAgB,GA0KLC,MAxKf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAERC,EAFQ,KAEDC,EAFC,OAGuBF,mBAAS,CAAC,CAACG,GAAIC,cAAUC,KAAM,oBAHtD,mBAGRC,EAHQ,KAGKC,EAHL,OAIaP,mBAAS,MAJtB,mBAIRQ,EAJQ,KAIAC,EAJA,KAOfC,qBAAU,WACRC,MAAM,eAAeC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UAAQF,MAAK,SAAAE,IACxDhB,EAAgBgB,EAAKC,KAAI,SAAAC,GAAK,MAAO,CAACC,MAAOD,EAAGE,MAAOF,OACrCG,OAAS,IACzBC,QAAQC,IAAIP,EAAK,IACjBL,EAAU,CAACQ,MAAOH,EAAK,GAAII,MAAOJ,EAAK,SAK3CjB,EAAc,GACdc,MAAM,oBAAoBC,MAAK,SAAAU,GAAQ,OAAIA,EAASR,UAASF,MAAK,SAAAE,GAChE,IAAIb,EAAQ,GACZa,EAAKC,KAAI,SAAAC,GACP,IAAMX,EAAOW,EAAC,MACdf,EAAMsB,KAAK,CAACpB,GAAIC,cAAUC,KAAMA,EAAMmB,OAAO,OAE/CtB,EAASD,QAiBV,IAGH,IA0FMwB,EAAc,CAClB,CACItB,GAAIuB,gBAAcC,UAAUxB,IAEhC,CACIA,GAAIuB,gBAAcE,gBAAgBzB,IAEtC,CACIA,GAAIuB,gBAAcG,iBAAiB1B,GACnC2B,mBAAmB,IAIzB,OACI,yBAAMC,UAAU,OACZ,mDACY,MAAVvB,GACF,kBAAC,IAAD,CACAwB,aAAcxB,EACdyB,SAAUxB,EACVyB,QAASpC,IAGT,oDAEA,kBAAC,cAAD,CAAaG,MAAOA,EAAOK,YAAaA,EAAa6B,aAnHpC,SAACC,EAAQC,GAChC,GAAkB,qBAAdD,EAAOjC,GAA2B,CACpC,QAAuBmC,IAAnBD,EAAKpC,MAAM,GAAmB,OAClC,IAAII,EAFgC,EAGnBgC,EAAKpC,MAAM,GAC5B,GADEI,EAHkC,EAGlCA,KAHkC,EAG5BmB,MACG,CACTnB,EAAOkC,mBAAmBA,mBAAmBlC,IAC7CR,EAAcA,EAAc,IAAMQ,EAClCe,QAAQC,IAAR,8BAAmChB,IACnCe,QAAQC,IAAR,wBAA6BxB,IAE7B,IACI2C,EADAvC,EAAQ,GAGduC,EAAc,sBAAOlC,GAAP,CAAoB,CAACH,GAAIC,cAAUC,KAAMA,KACvDe,QAAQC,IAAR,0BAA+BmB,IAG9B7B,MAAO,mBAAqBd,GAAae,MAAK,SAAAU,GAAQ,OAAIA,EAASR,UAASF,MAAK,SAAAE,GAEhFA,EAAKC,KAAI,SAAAC,GACP,IAAMyB,EAAMzB,EAAC,KACPX,EAAOW,EAAC,MACdf,EAAMsB,KAAK,CAACpB,GAAIC,cAAUC,KAAMA,EAAMmB,OAAO,EAAMiB,IAAKA,OAI1D9B,MAAM,aAAed,GAAae,MAAK,SAAAU,GAAQ,OAAIA,EAASR,UAAQF,MAAK,SAAAE,GACvEA,EAAKC,KAAI,SAAAC,GACP,IAAMyB,EAAMzB,EAAC,KACPX,EAAOW,EAAC,MACdf,EAAMsB,KAAK,CAACpB,GAAIC,cAAUC,KAAMA,EAAMoC,IAAKA,OAI7ClC,EAAeiC,GACftC,EAASD,cASXmB,QAAQC,IAAI,iBACZqB,MAAML,EAAKpC,MAAM,GAAGwC,UAInB,GAAkB,eAAdL,EAAOjC,GAAqB,CACnCN,EAAcA,EAAY8C,UAAU,EAAG9C,EAAY+C,YAAY,MAC/DxB,QAAQC,IAAIxB,GACZuB,QAAQC,IAAIf,GACZ,IAAIuC,EAAK,YAAOvC,GAChBuC,EAAQA,EAAMC,OAAO,EAAGD,EAAM1B,OAAS,GACvCC,QAAQC,IAAIwB,GAIZlC,MAAO,mBAAqBd,GAAae,MAAK,SAAAU,GAAQ,OAAIA,EAASR,UAASF,MAAK,SAAAE,GAE/EA,EAAKC,KAAI,SAAAC,GACP,IAAMyB,EAAMzB,EAAC,KACPX,EAAOW,EAAC,MACdf,EAAMsB,KAAK,CAACpB,GAAIC,cAAUC,KAAMA,EAAMmB,OAAO,EAAMiB,IAAKA,OAI1D9B,MAAM,aAAed,GAAae,MAAK,SAAAU,GAAQ,OAAIA,EAASR,UAAQF,MAAK,SAAAE,GACvEA,EAAKC,KAAI,SAAAC,GACP,IAAMyB,EAAMzB,EAAC,KACPX,EAAOW,EAAC,MACdf,EAAMsB,KAAK,CAACpB,GAAIC,cAAUC,KAAMA,EAAMoC,IAAKA,OAI7ClC,EAAesC,GACf3C,EAASD,SAOfmB,QAAQC,IAAIe,GACZhB,QAAQC,IAAIgB,IA6B+EU,2BAA2B,EAAMtB,YAAaA,GAC/H,kBAAC,cAAD,MACA,kBAAC,aAAD,MACA,kBAAC,WAAD,SCzKQuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.164dffd3.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileList, FileSearch, FileToolbar, ChonkyActions } from 'chonky';\nimport { v4 as uuidv4 } from 'uuid';\nimport Select from 'react-select';\n\nlet currentPath;\n\n/*\nlet playerOptions = [\n  { value: 'chocolate', label: 'Chocolate' },\n  { value: 'strawberry', label: 'Strawberry' },\n  { value: 'vanilla', label: 'Vanilla' },\n];\n*/\n\nlet playerOptions = [];\n\nfunction App() {\n\nconst [files, setFiles] = useState([]);\nconst [folderChain, setFolderChain] = useState([{id: uuidv4(), name: 'Network Shares'}]);\nconst [player, setPlayer] = useState(null);\n\n\nuseEffect(()=> {\n  fetch('/ha/players').then(request => request.json()).then(json => {\n    playerOptions = json.map(x=> {return {value: x, label: x}});\n    if (playerOptions.length > 0) {\n      console.log(json[0]);\n      setPlayer({value: json[0], label: json[0]});\n    }\n    \n  });\n\n  currentPath = \"\";\n  fetch('/api/directories').then(response => response.json() ).then(json => {\n    let files = [];\n    json.map(x => {\n      const name = x['short'];\n      files.push({id: uuidv4(), name: name, isDir: true});\n    });\n    setFiles(files);\n  });\n\n\n\n  /*\n  fetch('/ha/cast', {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n\n    }\n    ).then(response=>response.text()).then(text=>null);\n  },  []);\n*/\n}, []);\n\n\nconst handleFileAction = (action, data) => {\n  if (action.id === \"change_selection\") {\n    if (data.files[0]  === undefined) return;\n    let name,isDir;\n    ({name, isDir} = data.files[0]);\n    if (isDir) {\n      name = decodeURIComponent(decodeURIComponent(name));\n      currentPath = currentPath + \"/\" + name;\n      console.log(`Directory selected: ${name}`);\n      console.log(`Current Path: ${currentPath}`);\n     \n      let files = [];\n      let newFolderChain;\n\n    newFolderChain = [...folderChain, {id: uuidv4(), name: name}];\n    console.log(`Newfolderchain: ${newFolderChain}`);\n    //newFolderChain = [{id: uuidv4(), name: 'Network Shares'}, {id: uuidv4(), name: name}];\n     \n     fetch( '/api/directories' + currentPath).then(response => response.json() ).then(json => {\n\n      json.map(x => {\n        const url = x['full'];\n        const name = x['short'];\n        files.push({id: uuidv4(), name: name, isDir: true, url: url});\n      });\n\n\n      fetch('/api/files' + currentPath).then(response => response.json()).then(json => {\n        json.map(x => {\n          const url = x['full'];\n          const name = x['short'];\n          files.push({id: uuidv4(), name: name, url: url});\n        });         \n\n\n        setFolderChain(newFolderChain);\n        setFiles(files);      \n      });\n\n    });\n\n\n    }\n\n    else {\n      console.log(\"File selected\");\n      alert(data.files[0].url);\n    }\n  }\n\n  else if (action.id === \"open_files\") {\n    currentPath = currentPath.substring(0, currentPath.lastIndexOf(\"/\"));\n    console.log(currentPath);\n    console.log(folderChain);\n    let newfc = [...folderChain];\n    newfc = newfc.splice(0, newfc.length - 1);\n    console.log(newfc)\n    //setFolderChain(newfc);\n    //setFiles([{id: \"/back\", name: \"back.jpg\"}]);\n\n    fetch( '/api/directories' + currentPath).then(response => response.json() ).then(json => {\n\n      json.map(x => {\n        const url = x['full'];\n        const name = x['short'];\n        files.push({id: uuidv4(), name: name, isDir: true, url: url});\n      });\n\n\n      fetch('/api/files' + currentPath).then(response => response.json()).then(json => {\n        json.map(x => {\n          const url = x['full'];\n          const name = x['short'];\n          files.push({id: uuidv4(), name: name, url: url});\n        });         \n\n\n        setFolderChain(newfc);\n        setFiles(files);      \n      });\n\n    });\n\n  }\n\n  console.log(action);\n  console.log(data);\n\n};\n\nconst fileActions = [\n  {\n      id: ChonkyActions.OpenFiles.id,\n  },\n  {\n      id: ChonkyActions.ChangeSelection.id \n  },\n  {\n      id: ChonkyActions.OpenParentFolder.id,\n      requiresSelection: false\n  },\n];\n\nreturn (\n    <div  className=\"App\">\n        <h2>Choose Media Player</h2>\n        { player != null &&\n        <Select\n        defaultValue={player}\n        onChange={setPlayer}\n        options={playerOptions}\n        />\n        }\n        <h2>Choose Music To Play</h2>\n\n        <FileBrowser files={files} folderChain={folderChain} onFileAction={handleFileAction} disableDefaultFileActions={true} fileActions={fileActions}>\n            <FileToolbar />\n            <FileSearch />\n            <FileList />\n        </FileBrowser>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}