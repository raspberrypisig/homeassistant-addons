{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","files","setFiles","id","name","folderChain","setFolderChain","useEffect","isDir","className","onFileAction","action","data","undefined","console","log","newFolderChain","newfc","splice","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6QA+FeA,MAzFf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAERC,EAFQ,KAEDC,EAFC,OAGuBF,mBAAS,CAAC,CAACG,GAAI,IAAKC,KAAM,oBAHjD,mBAGRC,EAHQ,KAGKC,EAHL,KA8Ef,OAvEAC,qBAAW,WACTL,EAAS,CAAC,CAACC,GAAG,QAASC,KAAM,OAAQI,OAAO,GAAO,CAACL,GAAG,OAAQC,KAAM,MAAOI,OAAO,GAAO,CAACL,GAAG,WAAYC,KAAM,eAC/G,IAsEC,yBAAMK,UAAU,OACZ,kBAAC,cAAD,CAAaR,MAAOA,EAAOI,YAAaA,EAAaK,aAhDpC,SAACC,EAAQC,GAChC,GAAkB,qBAAdD,EAAOR,GAA2B,CACpC,QAAuBU,IAAnBD,EAAKX,MAAM,GAAmB,OAClC,IAAIG,EAAKD,EAF2B,EAGfS,EAAKX,MAAM,GAChC,GADEG,EAHkC,EAGlCA,KAAMD,EAH4B,EAG5BA,GAH4B,EAGxBK,MACD,CACVM,QAAQC,IAAI,sBACZ,IAAMC,EAAc,sBAAOX,GAAP,CAAoB,CAACF,GAAIA,EAAIC,KAAMA,KAGvDE,EAAeU,GACfd,EAHiB,CAAC,CAACC,GAAI,gBAAiBC,KAAM,WAAW,CAACD,GAAI,iBAAkBC,KAAM,mBAQrFU,QAAQC,IAAI,sBAIX,GAAkB,eAAdJ,EAAOR,GAAqB,CACnCW,QAAQC,IAAIV,GACZ,IAAIY,EAAK,YAAOZ,GAChBY,EAAQA,EAAMC,OAAO,EAAGD,EAAME,OAAS,GACvCL,QAAQC,IAAIE,GACZX,EAAeW,GACff,EAAS,CAAC,CAACC,GAAI,QAASC,KAAM,cAGhCU,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,KAmBF,kBAAC,cAAD,MACA,kBAAC,aAAD,MACA,kBAAC,WAAD,SC7EQQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.67cd0739.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileList, FileSearch, FileToolbar } from 'chonky';\n\n\nfunction App() {\n\nconst [files, setFiles] = useState([]);\nconst [folderChain, setFolderChain] = useState([{id: '/', name: 'Network Shares'}]);\n\n\n\nuseEffect( () => {\n  setFiles([{id:'/test', name: 'test', isDir: true}, {id:'/boo', name: 'boo', isDir: true}, {id:'/moo.mp3', name: 'moo.mp3'}]);\n}, []);\n\n  /*\n  const folderChain = React.useMemo(\n    () => [\n        { id: 'xXre', name: 'Network Shares' },\n    ],\n    []\n);\n\nconst files = React.useMemo(\n    () => [\n        { id: '1eBr', name: 'index.html' },\n        { id: 'xmFe', name: 'styles.css' },\n        { id: 'vEgS', name: 'scripts.js' },\n        { id: 'BVwA', name: 'favicon.ico' },\n        { id: 'VsdE', name: 'robots.txt' },\n        { id: '/test', name: 'test', isDir: true},\n    ],\n    []\n);\n*/\n\nconst handleFileAction = (action, data) => {\n  if (action.id === \"change_selection\") {\n    if (data.files[0]  === undefined) return;\n    let name,id,isDir;\n    ({name, id, isDir} = data.files[0]);\n    if (isDir) {\n     console.log(\"Directory selected\");\n     const newFolderChain = [...folderChain, {id: id, name: name}];\n     const newFiles = [{id: '/test/boo.mp3', name: 'boo.mp3'},{id: '/test/enya.mp3', name: 'enya.mp3'}];\n \n     setFolderChain(newFolderChain);\n     setFiles(newFiles);\n\n    }\n\n    else {\n      console.log(\"File selected\");\n    }\n  }\n\n  else if (action.id === \"open_files\") {\n    console.log(folderChain);\n    let newfc = [...folderChain];\n    newfc = newfc.splice(0, newfc.length - 1);\n    console.log(newfc)\n    setFolderChain(newfc);\n    setFiles([{id: \"/back\", name: \"back.jpg\"}]);\n  }\n\n  console.log(action);\n  console.log(data);\n\n  /*\n  console.log(action);\n  console.log(data);\n  console.log(data.files[0]['name']);\n  console.log(data.files[0]['id']);\n  console.log(data.files[0]['isDir']);\n  */\n\n\n\n\n};\n\n\nreturn (\n    <div  className=\"App\">\n        <FileBrowser files={files} folderChain={folderChain} onFileAction={handleFileAction}>\n            <FileToolbar />\n            <FileSearch />\n            <FileList />\n        </FileBrowser>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}